/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Authenticator } from "../../../prisma/generated/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAuthenticator(options?: Omit<(UseMutationOptions<(Authenticator | undefined), DefaultError, Prisma.AuthenticatorCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorCreateArgs, DefaultError, Authenticator, true>('Authenticator', 'POST', `${endpoint}/authenticator/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAuthenticator(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AuthenticatorCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Authenticator', 'POST', `${endpoint}/authenticator/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAuthenticator<TArgs extends Prisma.AuthenticatorFindManyArgs, TQueryFnData = Array<Prisma.AuthenticatorGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAuthenticator<TArgs extends Prisma.AuthenticatorFindManyArgs, TQueryFnData = Array<Prisma.AuthenticatorGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAuthenticator<TArgs extends Prisma.AuthenticatorFindManyArgs, TQueryFnData = Array<Prisma.AuthenticatorGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAuthenticator<TArgs extends Prisma.AuthenticatorFindManyArgs, TQueryFnData = Array<Prisma.AuthenticatorGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findMany`, args, options, fetch);
}

export function useFindUniqueAuthenticator<TArgs extends Prisma.AuthenticatorFindUniqueArgs, TQueryFnData = Prisma.AuthenticatorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAuthenticator<TArgs extends Prisma.AuthenticatorFindUniqueArgs, TQueryFnData = Prisma.AuthenticatorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findUnique`, args, options, fetch);
}

export function useFindFirstAuthenticator<TArgs extends Prisma.AuthenticatorFindFirstArgs, TQueryFnData = Prisma.AuthenticatorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAuthenticator<TArgs extends Prisma.AuthenticatorFindFirstArgs, TQueryFnData = Prisma.AuthenticatorGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/findFirst`, args, options, fetch);
}

export function useUpdateAuthenticator(options?: Omit<(UseMutationOptions<(Authenticator | undefined), DefaultError, Prisma.AuthenticatorUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorUpdateArgs, DefaultError, Authenticator, true>('Authenticator', 'PUT', `${endpoint}/authenticator/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAuthenticator(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AuthenticatorUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Authenticator', 'PUT', `${endpoint}/authenticator/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAuthenticator(options?: Omit<(UseMutationOptions<(Authenticator | undefined), DefaultError, Prisma.AuthenticatorUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorUpsertArgs, DefaultError, Authenticator, true>('Authenticator', 'POST', `${endpoint}/authenticator/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAuthenticator(options?: Omit<(UseMutationOptions<(Authenticator | undefined), DefaultError, Prisma.AuthenticatorDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorDeleteArgs, DefaultError, Authenticator, true>('Authenticator', 'DELETE', `${endpoint}/authenticator/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Authenticator, Prisma.AuthenticatorGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAuthenticator(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AuthenticatorDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AuthenticatorDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Authenticator', 'DELETE', `${endpoint}/authenticator/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AuthenticatorDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AuthenticatorDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AuthenticatorDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAuthenticator<TArgs extends Prisma.AuthenticatorAggregateArgs, TQueryFnData = Prisma.GetAuthenticatorAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAuthenticator<TArgs extends Prisma.AuthenticatorAggregateArgs, TQueryFnData = Prisma.GetAuthenticatorAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/aggregate`, args, options, fetch);
}

export function useGroupByAuthenticator<TArgs extends Prisma.AuthenticatorGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AuthenticatorGroupByArgs['orderBy'] } : { orderBy?: Prisma.AuthenticatorGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AuthenticatorGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AuthenticatorGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AuthenticatorGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AuthenticatorGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AuthenticatorGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAuthenticator<TArgs extends Prisma.AuthenticatorGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AuthenticatorGroupByArgs['orderBy'] } : { orderBy?: Prisma.AuthenticatorGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AuthenticatorGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AuthenticatorGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AuthenticatorGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AuthenticatorGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AuthenticatorGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/groupBy`, args, options, fetch);
}

export function useCountAuthenticator<TArgs extends Prisma.AuthenticatorCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AuthenticatorCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/count`, args, options, fetch);
}

export function useSuspenseCountAuthenticator<TArgs extends Prisma.AuthenticatorCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AuthenticatorCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AuthenticatorCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Authenticator', `${endpoint}/authenticator/count`, args, options, fetch);
}

export function useCheckAuthenticator<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { credentialID?: string; userId?: string; providerAccountId?: string; credentialPublicKey?: string; counter?: number; credentialDeviceType?: string; credentialBackedUp?: boolean; transports?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Authenticator', `${endpoint}/authenticator/check`, args, options, fetch);
}
